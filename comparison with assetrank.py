import numpy as np
import scipy.sparse as sp
from decimal import Decimal
from xml.dom.minidom import parse
import xml.dom.minidom
def construct_matrix(filename, m1, m2):
    matrix = np.zeros((m1, m2), dtype = np.int)   
    adj_matrix=np.zeros((m1, m2), dtype = np.int)
    #print(matrix)
    with open(filename, "r") as f:
        for line in f:
            entry = [i for i in line.split()]
            entry[0]=int(entry[0])
            entry[1]=int(entry[1])
            entry[2]=int(entry[2])
            #print(entry[0])
            #print(entry[1])
            #print(entry[2])
            matrix[entry[0]-1][entry[1]-1] = entry[2]
            adj_matrix[entry[0]-1][entry[1]-1]=1
    #out = sp.csc_matrix(matrix)
    #out = sp.csc_matrix(matrix)
    return matrix, adj_matrix
def Process_to_output(vec):
    lis=[]
    for i in range(len(vec)):
        lis.append((vec[i],i+1))
    #lis.sort(reverse=True)
    return lis
def Nor_matrix_col(matrix):
    row=matrix.shape[0]
    col=matrix.shape[1]
    vect=[0 for i in range(col)]
    for i in range(col):
        for j in range(row):
            vect[i]+=matrix[j][i]
    for i in range(col):
        for j in range(row):
            if vect[i] != 0:
                matrix[j][i]=matrix[j][i]/vect[i]
    return matrix
def Nor_vector(vec1):
    s=float(0)
    for i in range(len(vec1)):
        s+=vec1[i]
    for i in range(len(vec1)):
        vec1[i]=vec1[i]/s
    return vec1
def my_method(dd,dv,vd):
    r_d=[1/13 for i in range(13)]
    r_d_temp=[1/13 for i in range(13)]
    r_v=[6.4,10,10,4.9,10,10,2.9]
    r_v=Nor_vector(r_v)
    r_v_temp=r_v[:]
    for k in range(100):
        for i in range(13):
            temp0=0
            temp1=0
            for j in range(7):
                temp0+=dv[i][j]*r_v[j]
            for l in range(13):
                temp1+=dd[i][l]*r_d[l]
            #r_d_temp[i]=0.5*temp0+0.5*temp1
            r_d[i]=0.5*temp0+0.5*temp1
        #Nor_vector(r_D)
        for i in range(7):
            temp2=0
            for j in range(13):
                temp2+=vd[i][j]*r_d[j]
            #r_v_temp[i]=temp2
            r_v[i]=temp2
        r_d=Nor_vector(r_d)
        r_v=Nor_vector(r_v)
        #r_d_temp=Nor_vector(r_d_temp)
        #r_v_temp=Nor_vector(r_v_temp)
        #r_d=r_d_temp[:]
        #r_v=r_v_temp[:]
        #print("try1111111",r_V_exp)
        r_d_final=Process_to_output(r_d)
        r_v_final=Process_to_output(r_v)
        r_v_final.sort()
        r_v_final.reverse()
        r_d_final.sort()
        r_d_final.reverse()
        print(r_v_final)
        #print(r_d_final)

def ag_method(ag,dampling,index):
    r_d=[1/75 for i in range(75)]
    r_temp=[1/75 for i in range(75)]
    temp1=1/75
    for k in range(100):
        for i in range(75):
            temp0=0
            for j in range(75):
                '''if index[j]==1:
                    temp0+=r_d[j]
                else:
                    temp0+=ag[i][j]*r_d[j]'''
                temp0+=ag[i][j]*r_d[j]
            r_temp[i]=0.85*temp0+0.15*temp1
        r_d=r_temp[:]
        r_d=Nor_vector(r_d)
        r_d_final1=Process_to_output(r_d)
        r_d_final1.sort()
        r_d_final1.reverse()
        print(r_d_final1)
def main():
    #mat, adj=construct_matrix('toplogy.txt',19,19)
    w_dd=np.zeros((13,13),dtype=np.float)
    w_dv=np.zeros((13,7),dtype=np.float)
    #matrix_google=np.zeros((7,7),dtype=np.int)
    w_ag=np.zeros((75,75),dtype=np.float)
    index_d=[(2,5,7,9,10,12),(1,5,7,9,10,12),(1,5,7,9,10,12),(1,5,7,9,10,12),(1,6,7,9,10,12),(),(1,5,9,10,11,12),(7,11),(1,5,7,10,12),(1,5,7,9,11,12),(7,8,10),(1,5,7,9,10,13),(12,12)]
    index_and=[0 for i in range(75)]
    for i in range(len(index_d)):
        if i !=5:
            #print(i)
            for j in range(len(index_d[i])):
                #print(len(index_d[i]))
                w_dd[i][index_d[i][j]-1]=1
    w_dd[7][10]=2
    print(w_dd)
    ag_list=[]
    src=''
    dst=''
    id=''
    temp=''
    f=open('./attackgraph6.txt','r')
    lines=f.readlines()
    for line in lines:
        if '<src>' in line:
            src=line[line.find('<src>')+5:line.find('</src>')]
        if '<dst>' in line:
            dst=line[line.find('<dst>')+5:line.find('</dst>')]
            ag_list.append((src,dst))
            src=''
            dst=''
        if '<id>' in line:
            id=line[line.find('<id>')+4:line.find('</id>')]
        if '<type>' in line:
            if line[line.find('<type>')+6:line.find('</type>')]=='AND':
                index_and[int(id)-1]=1
            elif line[line.find('<type>')+6:line.find('</type>')]=='LEAF':
                index_and[int(id)-1]=2
            id=''
    
    for i in range(66):
        w_ag[int(ag_list[i][0])-1][int(ag_list[i][1])-1]=1
    w_dv[0][0]=10
    w_dv[2][1]=4.9
    w_dv[3][2]=8.6
    w_dv[4][3]=10
    w_dv[5][4]=8.6
    w_dv[6][0]=10
    w_dv[7][3]=10
    w_dv[8][2]=8.6
    w_dv[9][5]=8.6
    w_dv[10][4]=8.6
    w_dv[11][1]=4.9
    w_dv[12][6]=8.6
    #print(ag_list,len(ag_list))
    #print(index_and,len(index_and))
    print(w_dv)
    w_dd=w_dd.T
    w_vd=w_dv.T
    w_dd=Nor_matrix_col(w_dd)
    w_vd=Nor_matrix_col(w_vd)
    w_dv=Nor_matrix_col(w_dv)
    #w_ag=Nor_matrix_col(w_ag)
    
    '''index_and=[2,4,11,13,19,21,26,28]
    check_and=[0 for i in range(32)]
    for i in range(len(index_and)):
        check_and[index_and[i]-1]=1
    for i in range(len(index_D)):
        w_ag[index_D[i][0]-1][index_D[i][1]-1]=1
    for i in range(7):
        w_dv[i][i]=1
    print(w_ag)
    w_ag=w_ag.T
    w_dd=w_dd.T
    w_vd=w_dv.T
    for i in range(32):
        sum=0
        if check_and[i]=='1':
            continue
        else:
            for j in range(32):
                sum+=w_ag[j][i]
            for j in range(32):
                if sum !=0:
                    w_ag[j][i]=w_ag[j][i]/sum
                
    w_dd=Nor_matrix_col(w_dd)
    w_vd=Nor_matrix_col(w_vd)
    w_dv=Nor_matrix_col(w_dv)'''
    '''for i in range(len(index_and)):
        if index_and[i]!=2:
            print(i,' ',end='')'''
    sum_i=[0 for i in range(75)]
    for i in range(75):
        for j in range(75):
            sum_i+=w_ag[i][j]
    print('\n')
    for i in range(len(ag_list)):
        if index_and[int(ag_list[i][0])-1]==1:
            w_ag[int(ag_list[i][0])-1][int(ag_list[i][1])-1]=1
        elif index_and[int(ag_list[i][0])-1]==0:
            if index_and[int(ag_list[i][1])-1] == 2:
                w_ag[int(ag_list[i][0])-1][int(ag_list[i][1])-1]=1/sum_i[i]
            else:
                print(ag_list[i],end='')
    w_ag[2][3]=1/4
    w_ag[0][1]=1/16
    w_ag[11][12]=1/4
    w_ag[9][10]=1/16
    w_ag[19][20]=1/36
    w_ag[17][18]=1/64
    w_ag[32][33]=1/4
    w_ag[30][31]=1/16
    w_ag[26][27]=1/36
    w_ag[24][25]=1/64
    w_ag[39][40]=1/4
    w_ag[37][38]=1/16
    w_ag[47][48]=1/4
    w_ag[45][46]=1/16
    w_ag[55][56]=1/4
    w_ag[53][54]=1/16
    w_ag[69][70]=1/4
    w_ag[67][68]=1/16
    w_ag[63][64]=1/36
    w_ag[61][62]=1/64
   
    #print(w_ag[48][49])
    w_ag=w_ag.T
    print('\n')
    print(w_dv)
    my_method(w_dd,w_dv,w_vd)
    #ag_method(w_ag,0.85,index_and)
if __name__ =='__main__':
    main()              
    

