import numpy as np
import scipy.sparse as sp
from decimal import Decimal
import openpyxl as xl
def construct_matrix(filename, m1, m2):
    if filename=="DV(exp).txt":
        matrix = np.zeros((m1, m2), dtype = np.float)
    else:
        matrix = np.zeros((m1, m2), dtype = np.float)
    #adj_matrix=np.zeros((m1, m2), dtype = np.int)
    #print(matrix)
    with open(filename, "r") as f:
        for line in f:
            entry = [i for i in line.split()]
            entry[0]=int(entry[0])
            entry[1]=int(entry[1])
            if filename=="DV(exp).txt":
                entry[2]=float(entry[2])
            else:
                entry[2]=int(entry[2])
            #print(entry[0])
            #print(entry[1])
            #print(entry[2])
            matrix[entry[0]-1][entry[1]-1] = entry[2]
            #adj_matrix[entry[0]-1][entry[1]-1]=1
    #out = sp.csc_matrix(matrix)
    #out = sp.csc_matrix(matrix)
    return matrix
def Get_expscore(xlsx):
    wb = xl.load_workbook(xlsx)
    # 仅支持单sheet
    sheet = wb.active
    i = 2
    s=0
    vector=[]
    while(sheet["C%d" % i].value != None):
        t=float(sheet["C%d" % i].value)
        vector.append(t)
        i += 1
        s+=t
    return vector
def Get_impscore(xlsx):
    wb = xl.load_workbook(xlsx)
    # 仅支持单sheet
    sheet = wb.active
    i = 2
    s=0
    vector=[]
    while(sheet["E%d" % i].value != None):
        t=float(sheet["E%d" % i].value)
        vector.append(t)
        i += 1
        s+=t
    return vector
def Get_basescore(xlsx):
    wb = xl.load_workbook(xlsx)
    # 仅支持单sheet
    sheet = wb.active
    i = 2
    s=0
    vector=[]
    while(sheet["C%d" % i].value != None):
        t=float(sheet["C%d" % i].value)
        vector.append(t)
        i += 1
        s+=t
    return vector
def Nor_vector(vec1):
    s=float(0)
    for i in range(len(vec1)):
        s+=vec1[i]
    for i in range(len(vec1)):
        vec1[i]=vec1[i]/s
    return vec1
def Process_to_output(vec):
    lis=[]
    for i in range(len(vec)):
        lis.append((vec[i],i+1))
    #lis.sort(reverse=True)
    return lis
    
def Nor_matrix_col(matrix):
    row=matrix.shape[0]
    col=matrix.shape[1]
    #print(row,col)
    vect=[0 for i in range(col)]
    for i in range(col):
        for j in range(row):
            vect[i]+=matrix[j][i]
        #print(vect[i])
    for i in range(col):
        for j in range(row):
            #print(matrix[j][i],vect[i])
            if vect[i]==0:
                matrix[j][i]=0
            else:
                matrix[j][i]=matrix[j][i]/vect[i]
            #print(matrix[j][i])
    return matrix

def Get_order(p_imp, cvss_imp, risk_score, cvss_score, filename):
    a=[0 for i in range(len(p_imp))]
    b=[0 for i in range(len(cvss_imp))]
    c=[0 for i in range(len(risk_score))]
    d=[0 for i in range(len(cvss_score))]
    for i in range(len(p_imp)):
        a[p_imp[i][1]-1]=i
    for i in range(len(cvss_imp)):
        b[cvss_imp[i][1]-1]=i
    for i in range(len(cvss_score)):
        c[risk_score[i][1]-1]=i
    for i in range(len(cvss_score)):
        d[cvss_score[i][1]-1]=i

    f=open(filename,'w+')
    for i in range(len(a)):
        f.write(str(a[i]+1)+' ')
    f.write('\n')
    for i in range(len(b)):
        f.write(str(b[i]+1)+' ')
    f.write('\n')
    for i in range(len(c)):
        f.write(str(c[i]+1)+' ')    
    f.write('\n')
    for i in range(len(d)):
        f.write(str(d[i]+1)+' ')
    f.write('\n')
def pagerank(trans1,trans2,v1,v2,a):
    row1=trans1.shape[0]
    col1=trans1.shape[1]
    DV=trans1
    DV=Nor_matrix_col(DV)
    VD=DV.T
    VD=Nor_matrix_col(VD)
    DD=trans2.T
    DD=Nor_matrix_col(trans2)
    #distance=v[:]
    #print(distance)
    for k in range(10):
        #print(distance)
        #print(v)
        #flag=0
        for i in range(row1):
            temp0=0
            temp1=0
            for j in range(col1):
                temp0+=DV[i][j]*v2[j]
            for l in range(row1):
                temp1+=DD[i][l]*v1[l]
            v1[i]=0.5*temp0+0.5*temp1
        #v1=Nor_vector(v1)
        for i in range(col1):
            temp2=0
            for j in range(row1):
                temp2+=VD[i][j]*v1[j]
            v2[i]=temp2
        
        v1=Nor_vector(v1)
        v2=Nor_vector(v2)
        #print("try1111111",r_V_exp)
        D_final=Process_to_output(v1)
        V_final=Process_to_output(v2)
        
        #v=Nor_vector(v)
        '''s=float(0)
        for i in range(len(v)):
            s+=v[i]
        for i in range(len(v)):
            v[i]=v[i]/s'''
        #print(v)
        #print(distance)
        '''for i in range(len(distance)):
            if abs(v[i]-distance[i])>0.0000001:

                print(abs(v[i]-distance[i]))
                flag=1
        if flag==0:
            print(k)
            break'''
        #distance=v[:]
        #print(v)
        #print("try1111111",r_V_exp)
        #v_final=Process_to_output(v)
        #r_V_final=Process_to_output(r_V)
        '''for i in range(37):
            if i==36:
                f_conver_data.write(str(round(r_V_final[i][0],6))+'\n')
            else:
                f_conver_data.write(str(round(r_V_final[i][0],6))+' ')'''
        #print(k,":::::",r_D_final)
        V_final.sort()
        V_final.reverse()
        print(k,":::::")
        print("////////")
        print(V_final)
        print("////////////////////////")
def main():
    #mat, adj=construct_matrix('toplogy.txt',19,19)
   # W_DV=construct_matrix("DV(exp).txt",19,37)
    
    #W_DD=construct_matrix("toplogy.txt",19,19)

    #print(W_DD)
    #for i in range(14):
    #    W_DD[18][i]=0
    #W_D=W_DD.T
    #print(W_D)
    '''print(W_VD)
    print(W_DV)'''
    #print(W_DD)
    #r_D=[float(1/19) for i in range(19)]
    #r_V=r_D
    

    W_DV=np.zeros((134,13), dtype=np.float)
    W_DD=np.zeros((134,134), dtype=np.float)
    for i in range(128):
        W_DV[i,0]=10.0
        W_DV[i,1]=10.0
        W_DV[i,2]=3.9
    W_DV[128,3]=8.6
    W_DV[129,4]=10.0
    W_DV[129,5]=10.0
    W_DV[129,6]=10.0
    W_DV[130,7]=8.0
    W_DV[131,8]=10.0
    W_DV[131,9]=10.0
    W_DV[131,10]=10.0
    W_DV[133,11]=10.0
    W_DV[132,12]=4.9
    for i in range(128):
        for j in range(134):
            if i!=j and j!=131:
                W_DD[i,j]=1
            elif j==131:
                W_DD[i,j]=2
    
    W_DD[128][129]=1
    W_DD[128][130]=1
    W_DD[128][131]=2
    W_DD[128][132]=1
    W_DD[128][133]=1
    for i in range(129):
        W_DD[129,i]=1
    W_DD[132][130]=1
    W_VD=W_DV.T
    W_DD=W_DD.T

    print(W_DD)
    init_D=[float(1/134) for i in range(134)]
    #r_V=Get_impscore("vulnerability-infor.xlsx")
    init_V=[6.4,6.4,6.9,10.0,6.9,10.0,6.4,10.0,10.0,2.9,6.4,2.9,10.0]
    #r_V=[float(1/37) for i in range(37)]
    init_V=Nor_vector(init_V)

    print(W_DD)
    print(W_DV)
    pagerank(W_DV,W_DD,init_D,init_V,0.5)
    #r_V=Get_impscore("vulnerability-infor.xlsx")
    #r_V=[6.4,6.4,6.9,10.0,6.9,10.0,6.4,10.0,10.0,2.9,6.4,2.9,10.0]
    #r_V=[float(1/37) for i in range(37)]
    #r_V=Nor_vector(r_V)
    #print(r_V)
    #W_DV=Nor_matrix_col(W_DV)
    #W_VD=Nor_matrix_col(W_VD)
    #W_D=Nor_matrix_col(W_D)
    #print(W_D)
    #print("fuuuuuuuck",r_V_exp)
    #print(r_V,len(r_V),s_r_V)
    #f_conver_data=open('convergence_data.txt','w+')
 
        #print(r_V_exp)
    #f_conver_data.close()
    #r_V_exp=Get_expscore("VA.xlsx")
    #r_V_exp=Nor_vector(r_V_exp)
    #r_V_exp_final=Process_to_output(r_V_exp)
    #r_V_base=Process_to_output(Nor_vector(Get_basescore("vulnerability-infor.xlsx")))
    #print(r_V_exp,"///")
    '''score_final=[]
    for i in range(37):
        score_final.append((r_V_final[i][0]+r_V_exp_final[i][0],i+1))
    score_final.sort()
    score_final.reverse()
    r_V_final.sort()
    r_V_final.reverse()
    r_V_exp_final.sort()
    r_V_exp_final.reverse()
    r_V_base.sort()
    r_V_base.reverse()
    V_impscore=Process_to_output(Nor_vector(Get_impscore("vulnerability-infor.xlsx")))
    V_impscore.sort()
    V_impscore.reverse()
    print(r_V_exp)
    print(score_final)
    Get_order(r_V_final,V_impscore,score_final,r_V_base,'ord_figure.txt')

    f_table1_tex=open('table1_tex.txt','w+')
    for i in range(37):
        f_table1_tex.write(str(i+1)+' '+'&'+' '+str(round(r_V_final[i][0],6))+' '+'&'+' '+str(r_V_final[i][1])+' '+'&'+' '+str(round(V_impscore[i][0],6))+' '+'&'+' '+str(V_impscore[i][1])+' '+'&'+' '+str(round(score_final[i][0],6))+' '+'&'+' '+str(score_final[i][1])+' '+'&'+' '+str(round(r_V_base[i][0],6))+' '+'&'+' '+str(r_V_base[i][1])+' '+'\\'+'\\'+' '+'\hline'+'\n')
    f_table1_tex.close()'''


        

if __name__ =='__main__':
    main()  
